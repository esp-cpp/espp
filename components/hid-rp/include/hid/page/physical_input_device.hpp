#ifndef __HID_PAGE_PHYSICAL_INPUT_DEVICE_HPP_
#define __HID_PAGE_PHYSICAL_INPUT_DEVICE_HPP_

#include "hid/usage.hpp"

namespace hid::page {
enum class physical_input_device : std::uint8_t;
template <> struct info<physical_input_device> {
  constexpr static page_id_t page_id = 0x000f;
  constexpr static usage_id_t max_usage_id = 0x00ac;
  constexpr static const char *name = "Physical Input Device";
};
enum class physical_input_device : std::uint8_t {
  PHYSICAL_INPUT_DEVICE = 0x0001,
  NORMAL = 0x0020,
  SET_EFFECT_REPORT = 0x0021,
  EFFECT_PARAMETER_BLOCK_INDEX = 0x0022,
  PARAMETER_BLOCK_OFFSET = 0x0023,
  ROM_FLAG = 0x0024,
  EFFECT_TYPE = 0x0025,
  ET_CONSTANT_FORCE = 0x0026,
  ET_RAMP = 0x0027,
  ET_CUSTOM_FORCE = 0x0028,
  ET_SQUARE = 0x0030,
  ET_SINE = 0x0031,
  ET_TRIANGLE = 0x0032,
  ET_SAWTOOTH_UP = 0x0033,
  ET_SAWTOOTH_DOWN = 0x0034,
  ET_SPRING = 0x0040,
  ET_DAMPER = 0x0041,
  ET_INERTIA = 0x0042,
  ET_FRICTION = 0x0043,
  DURATION = 0x0050,
  SAMPLE_PERIOD = 0x0051,
  GAIN = 0x0052,
  TRIGGER_BUTTON = 0x0053,
  TRIGGER_REPEAT_INTERVAL = 0x0054,
  AXES_ENABLE = 0x0055,
  DIRECTION_ENABLE = 0x0056,
  DIRECTION = 0x0057,
  TYPE_SPECIFIC_BLOCK_OFFSET = 0x0058,
  BLOCK_TYPE = 0x0059,
  SET_ENVELOPE_REPORT = 0x005a,
  ATTACK_LEVEL = 0x005b,
  ATTACK_TIME = 0x005c,
  FADE_LEVEL = 0x005d,
  FADE_TIME = 0x005e,
  SET_CONDITION_REPORT = 0x005f,
  CENTER_POINT_OFFSET = 0x0060,
  POSITIVE_COEFFICIENT = 0x0061,
  NEGATIVE_COEFFICIENT = 0x0062,
  POSITIVE_SATURATION = 0x0063,
  NEGATIVE_SATURATION = 0x0064,
  DEAD_BAND = 0x0065,
  DOWNLOAD_FORCE_SAMPLE = 0x0066,
  ISOCH_CUSTOM_FORCE_ENABLE = 0x0067,
  CUSTOM_FORCE_DATA_REPORT = 0x0068,
  CUSTOM_FORCE_DATA = 0x0069,
  CUSTOM_FORCE_VENDOR_DEFINED_DATA = 0x006a,
  SET_CUSTOM_FORCE_REPORT = 0x006b,
  CUSTOM_FORCE_DATA_OFFSET = 0x006c,
  SAMPLE_COUNT = 0x006d,
  SET_PERIODIC_REPORT = 0x006e,
  OFFSET = 0x006f,
  MAGNITUDE = 0x0070,
  PHASE = 0x0071,
  PERIOD = 0x0072,
  SET_CONSTANT_FORCE_REPORT = 0x0073,
  SET_RAMP_FORCE_REPORT = 0x0074,
  RAMP_START = 0x0075,
  RAMP_END = 0x0076,
  EFFECT_OPERATION_REPORT = 0x0077,
  EFFECT_OPERATION = 0x0078,
  OP_EFFECT_START = 0x0079,
  OP_EFFECT_START_SOLO = 0x007a,
  OP_EFFECT_STOP = 0x007b,
  LOOP_COUNT = 0x007c,
  DEVICE_GAIN_REPORT = 0x007d,
  DEVICE_GAIN = 0x007e,
  PARAMETER_BLOCK_POOLS_REPORT = 0x007f,
  RAM_POOL_SIZE = 0x0080,
  ROM_POOL_SIZE = 0x0081,
  ROM_EFFECT_BLOCK_COUNT = 0x0082,
  SIMULTANEOUS_EFFECTS_MAX = 0x0083,
  POOL_ALIGNMENT = 0x0084,
  PARAMETER_BLOCK_MOVE_REPORT = 0x0085,
  MOVE_SOURCE = 0x0086,
  MOVE_DESTINATION = 0x0087,
  MOVE_LENGTH = 0x0088,
  EFFECT_PARAMETER_BLOCK_LOAD_REPORT = 0x0089,
  EFFECT_PARAMETER_BLOCK_LOAD_STATUS = 0x008b,
  BLOCK_LOAD_SUCCESS = 0x008c,
  BLOCK_LOAD_FULL = 0x008d,
  BLOCK_LOAD_ERROR = 0x008e,
  BLOCK_HANDLE = 0x008f,
  EFFECT_PARAMETER_BLOCK_FREE_REPORT = 0x0090,
  TYPE_SPECIFIC_BLOCK_HANDLE = 0x0091,
  PID_STATE_REPORT = 0x0092,
  EFFECT_PLAYING = 0x0094,
  PID_DEVICE_CONTROL_REPORT = 0x0095,
  PID_DEVICE_CONTROL = 0x0096,
  DC_ENABLE_ACTUATORS = 0x0097,
  DC_DISABLE_ACTUATORS = 0x0098,
  DC_STOP_ALL_EFFECTS = 0x0099,
  DC_RESET = 0x009a,
  DC_PAUSE = 0x009b,
  DC_CONTINUE = 0x009c,
  DEVICE_PAUSED = 0x009f,
  ACTUATORS_ENABLED = 0x00a0,
  SAFETY_SWITCH = 0x00a4,
  ACTUATOR_OVERRIDE_SWITCH = 0x00a5,
  ACTUATOR_POWER = 0x00a6,
  START_DELAY = 0x00a7,
  PARAMETER_BLOCK_SIZE = 0x00a8,
  DEVICE_MANAGED_POOL = 0x00a9,
  SHARED_PARAMETER_BLOCKS = 0x00aa,
  CREATE_NEW_EFFECT_PARAMETER_BLOCK_REPORT = 0x00ab,
  RAM_POOL_AVAILABLE = 0x00ac,
};
} // namespace hid::page

#endif // __HID_PAGE_PHYSICAL_INPUT_DEVICE_HPP_
